In the example app, go to in debug mode and can see endpoints that the auth system has made available: http://127.0.0.1:8000/accounts/ e.g. login and logout, password_reset come out of the box.

User authentication in Django¶

Django comes with a user authentication system. It handles user accounts, groups, permissions and cookie-based user sessions. The default implementation works out of the box but it can be extended and customized it to suit your project’s needs.

The Django authentication system handles both authentication and authorization. Authentication support is bundled as a Django contrib module in django.contrib.auth. By default, the required configuration is already included in the settings.py (under INSTALLED_APPS and MIDDLEWARE) generated by django-admin startproject. 

User objects are the core of the authentication system. They typically represent the people interacting with your site and are used to enable things like restricting access, registering user profiles, associating content with creators etc. Only one class of user exists in Django’s authentication framework, i.e., 'superusers' or admin 'staff' users are just user objects with special attributes set, not different classes of user objects.

# The most direct way of creating users:
>>> from django.contrib.auth.models import User
>>> user = User.objects.create_user('john', 'lennon@thebeatles.com', 'johnpassword')

# At this point, user is a User object that has already been saved
# to the database. You can continue to change its attributes
# if you want to change other fields.
>>> user.last_name = 'Lennon'
>>> user.save()

Use authenticate() from django.contrib.auth to verify user credentials. It checks username and password arguments against each authentication backend, and returns a User object if the credentials are valid for a backend or None if not valid. Request is an optional parameter for authenticate().

To limit access to logged in users, use the @login_required decorator (with the optional parameter url='/accounts/login/'), or use LoginRequired mixin. There is also the @permission_required decorator and PermissionRequired mixin.


