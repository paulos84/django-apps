from django import template
from ..models import Post
from django.db.models import Count
from django.utils.safestring import mark_safe
import markdown

register = template.Library()

@register.simple_tag  #the function name will be used as the tag name unless you give decorator an agrument (name='eg')
def total_posts():
    return Post.published.count()

#similar to include tag, but use it where you want to render a tender with values and not use the exact same everytime:
@register.inclusion_tag('blog/post/latest_posts.html')
def show_latest_posts(count=5):
    latest_posts = Post.published.order_by('-publish')[:count]
    return {'latest_posts': latest_posts} #values to render the template specified in the decorator argument params

@register.assignment_tag  # assignment tags are like simple tags but they store the result in a given variable
def get_most_commented_posts(count=5):
    return Post.published.annotate(total_comments=Count('comments')).order_by('-total_comments')[:count]
#The notation in templates is {% template_tag as variable %}
#For this example, use {% get_most_commented_posts as most_commented_posts %}
#The result of the template tag is stored in a new variable created within the template named most_commented_posts.
#This new variable can then be used in e.g. a for loop to display a list of posts

#a filter supplied with one arg: {{ variable|my_ filter:"foo" }}
#you can use any number of filters using the following notation: {{ variable|filter1|filter2 }}

@register.filter(name='markdown') # name of filter to be used by the template, instead of default (the function name)
def markdown_format(text):
    return mark_safe(markdown.markdown(text))
# the mark_safe function provided by Django marks the result as safe HTML to be rendered by the template
# django usually escapes HTML generated by filters, in order to prevent potentially dangerous HTML being outputted